; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=cahp -verify-machineinstrs < %s \
; RUN:   | FileCheck %s -check-prefix=CAHP

; FIXME: an unncessary register is allocated just to store 0. X0 should be
; used instead

define i8 @sext_i1_to_i8(i1 %a) {
; TODO: the addi that stores 0 in t1 is unnecessary
; CAHP-LABEL: sext_i1_to_i8:
; CAHP:       # %bb.0:
; CAHP-NEXT:	andi2	a0, 1
; CAHP-NEXT:	lsi	a1, 0
; CAHP-NEXT:	sub	a0, a1, a0
; CAHP-NEXT:	jr	ra
  %1 = sext i1 %a to i8
  ret i8 %1
}

define i16 @sext_i1_to_i16(i1 %a) {
; TODO: the addi that stores 0 in t1 is unnecessary
; CAHP-LABEL: sext_i1_to_i16:
; CAHP:       # %bb.0:
; CAHP-NEXT:	andi2	a0, 1
; CAHP-NEXT:	lsi	a1, 0
; CAHP-NEXT:	sub	a0, a1, a0
; CAHP-NEXT:	jr	ra
  %1 = sext i1 %a to i16
  ret i16 %1
}

define i32 @sext_i1_to_i32(i1 %a) {
; TODO: the addi that stores 0 in t1 is unnecessary
; CAHP-LABEL: sext_i1_to_i32:
; CAHP:       # %bb.0:
; CAHP-NEXT:	andi2	a0, 1
; CAHP-NEXT:	lsi	a1, 0
; CAHP-NEXT:	sub	a0, a1, a0
; CAHP-NEXT:	mov	a1, a0
; CAHP-NEXT:	jr	ra
  %1 = sext i1 %a to i32
  ret i32 %1
}

define i16 @sext_i8_to_i16(i8 %a) {
; CAHP-LABEL: sext_i8_to_i16:
; CAHP:       # %bb.0:
; CAHP-NEXT:	lsli2	a0, 8
; CAHP-NEXT:	asri2	a0, 8
; CAHP-NEXT:	jr	ra
  %1 = sext i8 %a to i16
  ret i16 %1
}

define i32 @sext_i8_to_i32(i8 %a) {
; CAHP-LABEL: sext_i8_to_i32:
; CAHP:       # %bb.0:
; CAHP-NEXT:	lsli	a1, a0, 8
; CAHP-NEXT:	asri	a0, a1, 8
; CAHP-NEXT:	asri2	a1, 15
; CAHP-NEXT:	jr	ra
  %1 = sext i8 %a to i32
  ret i32 %1
}

define i32 @sext_i16_to_i32(i16 %a) {
; CAHP-LABEL: sext_i16_to_i32:
; CAHP:       # %bb.0:
; CAHP-NEXT:	asri	a1, a0, 15
; CAHP-NEXT:	jr	ra
  %1 = sext i16 %a to i32
  ret i32 %1
}

define i8 @zext_i1_to_i8(i1 %a) {
; CAHP-LABEL: zext_i1_to_i8:
; CAHP:       # %bb.0:
; CAHP-NEXT:	andi2	a0, 1
; CAHP-NEXT:	jr	ra
  %1 = zext i1 %a to i8
  ret i8 %1
}

define i16 @zext_i1_to_i16(i1 %a) {
; CAHP-LABEL: zext_i1_to_i16:
; CAHP:       # %bb.0:
; CAHP-NEXT:	andi2	a0, 1
; CAHP-NEXT:	jr	ra
  %1 = zext i1 %a to i16
  ret i16 %1
}

define i32 @zext_i1_to_i32(i1 %a) {
; CAHP-LABEL: zext_i1_to_i32:
; CAHP:       # %bb.0:
; CAHP-NEXT:	andi2	a0, 1
; CAHP-NEXT:	lsi	a1, 0
; CAHP-NEXT:	jr	ra
  %1 = zext i1 %a to i32
  ret i32 %1
}

define i16 @zext_i8_to_i16(i8 %a) {
; CAHP-LABEL: zext_i8_to_i16:
; CAHP:       # %bb.0:
; CAHP-NEXT:	andi	a0, a0, 255
; CAHP-NEXT:	jr	ra
  %1 = zext i8 %a to i16
  ret i16 %1
}

define i32 @zext_i8_to_i32(i8 %a) {
; CAHP-LABEL: zext_i8_to_i32:
; CAHP:       # %bb.0:
; CAHP-NEXT:	andi	a0, a0, 255
; CAHP-NEXT:	lsi	a1, 0
; CAHP-NEXT:	jr	ra
  %1 = zext i8 %a to i32
  ret i32 %1
}

define i32 @zext_i16_to_i32(i16 %a) {
; CAHP-LABEL: zext_i16_to_i32:
; CAHP:       # %bb.0:
; CAHP-NEXT:	lsi	a1, 0
; CAHP-NEXT:	jr	ra
  %1 = zext i16 %a to i32
  ret i32 %1
}

; TODO: should the trunc tests explicitly ensure no code is generated before
; jalr?

define i1 @trunc_i8_to_i1(i8 %a) {
; CAHP-LABEL: trunc_i8_to_i1:
; CAHP:       # %bb.0:
; CAHP-NEXT:	jr	ra
  %1 = trunc i8 %a to i1
  ret i1 %1
}

define i1 @trunc_i16_to_i1(i16 %a) {
; CAHP-LABEL: trunc_i16_to_i1:
; CAHP:       # %bb.0:
; CAHP-NEXT:	jr	ra
  %1 = trunc i16 %a to i1
  ret i1 %1
}

define i1 @trunc_i32_to_i1(i32 %a) {
; CAHP-LABEL: trunc_i32_to_i1:
; CAHP:       # %bb.0:
; CAHP-NEXT:	jr	ra
  %1 = trunc i32 %a to i1
  ret i1 %1
}

define i8 @trunc_i16_to_i8(i16 %a) {
; CAHP-LABEL: trunc_i16_to_i8:
; CAHP:       # %bb.0:
; CAHP-NEXT:	jr	ra
  %1 = trunc i16 %a to i8
  ret i8 %1
}

define i8 @trunc_i32_to_i8(i32 %a) {
; CAHP-LABEL: trunc_i32_to_i8:
; CAHP:       # %bb.0:
; CAHP-NEXT:	jr	ra
  %1 = trunc i32 %a to i8
  ret i8 %1
}

define i16 @trunc_i32_to_i16(i32 %a) {
; CAHP-LABEL: trunc_i32_to_i16:
; CAHP:       # %bb.0:
; CAHP-NEXT:	jr	ra
  %1 = trunc i32 %a to i16
  ret i16 %1
}
