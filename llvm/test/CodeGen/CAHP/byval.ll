; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=cahp -verify-machineinstrs < %s \
; RUN:   | FileCheck -check-prefix=CAHP %s

%struct.Foo = type { i16, i16, i16, i16, i8 }
@foo = global %struct.Foo { i16 1, i16 2, i16 3, i16 4, i8 5 }

define i16 @callee(%struct.Foo* byval %f) {
; CAHP-LABEL: callee:
; CAHP:       # %bb.0:
; CAHP-NEXT:	lw	a0, 0(a0)
; CAHP-NEXT:	jr	ra
  %1 = getelementptr inbounds %struct.Foo, %struct.Foo* %f, i32 0, i32 0
  %2 = load i16, i16* %1
  ret i16 %2
}

define void @caller() {
; CAHP-LABEL: caller:
; CAHP:       # %bb.0:
; CAHP-NEXT:	addi2	sp, -12
; CAHP-NEXT:	swsp	ra, 10(sp)
; CAHP-NEXT:	lui	a0, %hi(foo+8)
; CAHP-NEXT:	addi	a0, a0, %lo(foo+8)
; CAHP-NEXT:	lw	a0, 0(a0)
; CAHP-NEXT:	swsp	a0, 8(sp)
; CAHP-NEXT:	lui	a0, %hi(foo+6)
; CAHP-NEXT:	addi	a0, a0, %lo(foo+6)
; CAHP-NEXT:	lw	a0, 0(a0)
; CAHP-NEXT:	swsp	a0, 6(sp)
; CAHP-NEXT:	lui	a0, %hi(foo+4)
; CAHP-NEXT:	addi	a0, a0, %lo(foo+4)
; CAHP-NEXT:	lw	a0, 0(a0)
; CAHP-NEXT:	swsp	a0, 4(sp)
; CAHP-NEXT:	lui	a0, %hi(foo+2)
; CAHP-NEXT:	addi	a0, a0, %lo(foo+2)
; CAHP-NEXT:	lw	a0, 0(a0)
; CAHP-NEXT:	swsp	a0, 2(sp)
; CAHP-NEXT:	lui	a0, %hi(foo)
; CAHP-NEXT:	addi	a0, a0, %lo(foo)
; CAHP-NEXT:	lw	a0, 0(a0)
; CAHP-NEXT:	swsp	a0, 0(sp)
; CAHP-NEXT:	addi	a0, sp, 0
; CAHP-NEXT:	jsal	callee
; CAHP-NEXT:	lwsp	ra, 10(sp)
; CAHP-NEXT:	addi2	sp, 12
; CAHP-NEXT:	jr	ra
  %call = call i16 @callee(%struct.Foo* byval @foo)
  ret void
}
