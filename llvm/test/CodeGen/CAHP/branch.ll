; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=cahp -verify-machineinstrs < %s \
; RUN:   | FileCheck -check-prefix=CAHP %s

define void @foo(i16 %a, i16 *%b, i1 %c) {
; CAHP-LABEL: foo:
; CAHP:       # %bb.0:
; CAHP-NEXT: 	lw	a2, 0(a1)
; CAHP-NEXT: 	beq	a2, a0, .LBB0_11
; CAHP-NEXT: # %bb.1:                                # %test2
; CAHP-NEXT: 	lw	a2, 0(a1)
; CAHP-NEXT: 	bne	a2, a0, .LBB0_11
; CAHP-NEXT: # %bb.2:                                # %test3
; CAHP-NEXT: 	lw	a2, 0(a1)
; CAHP-NEXT: 	blt	a2, a0, .LBB0_11
; CAHP-NEXT: # %bb.3:                                # %test4
; CAHP-NEXT: 	lw	a2, 0(a1)
; CAHP-NEXT: 	ble	a2, a0, .LBB0_11
; CAHP-NEXT: # %bb.4:                                # %test5
; CAHP-NEXT: 	lw	a2, 0(a1)
; CAHP-NEXT: 	bltu	a2, a0, .LBB0_11
; CAHP-NEXT: # %bb.5:                                # %test6
; CAHP-NEXT: 	lw	a2, 0(a1)
; CAHP-NEXT: 	bleu	a2, a0, .LBB0_11
; CAHP-NEXT: # %bb.6:                                # %test7
; CAHP-NEXT: 	lw	a2, 0(a1)
; CAHP-NEXT: 	blt	a0, a2, .LBB0_11
; CAHP-NEXT: # %bb.7:                                # %test8
; CAHP-NEXT: 	lw	a2, 0(a1)
; CAHP-NEXT: 	ble	a0, a2, .LBB0_11
; CAHP-NEXT: # %bb.8:                                # %test9
; CAHP-NEXT: 	lw	a2, 0(a1)
; CAHP-NEXT: 	bltu	a0, a2, .LBB0_11
; CAHP-NEXT: # %bb.9:                                # %test10
; CAHP-NEXT: 	lw	a2, 0(a1)
; CAHP-NEXT: 	bleu	a0, a2, .LBB0_11
; CAHP-NEXT: # %bb.10:                               # %test12
; CAHP-NEXT: 	lw	a0, 0(a1)
; CAHP-NEXT: .LBB0_11:                               # %end
; CAHP-NEXT: 	jr	ra

  %val1 = load volatile i16, i16* %b
  %tst1 = icmp eq i16 %val1, %a
  br i1 %tst1, label %end, label %test2

test2:
  %val2 = load volatile i16, i16* %b
  %tst2 = icmp ne i16 %val2, %a
  br i1 %tst2, label %end, label %test3

test3:
  %val3 = load volatile i16, i16* %b
  %tst3 = icmp slt i16 %val3, %a
  br i1 %tst3, label %end, label %test4

test4:
  %val4 = load volatile i16, i16* %b
  %tst4 = icmp sle i16 %val4, %a
  br i1 %tst4, label %end, label %test5

test5:
  %val5 = load volatile i16, i16* %b
  %tst5 = icmp ult i16 %val5, %a
  br i1 %tst5, label %end, label %test6

test6:
  %val6 = load volatile i16, i16* %b
  %tst6 = icmp ule i16 %val6, %a
  br i1 %tst6, label %end, label %test7

; Check for condition codes that don't have a matching instruction

test7:
  %val7 = load volatile i16, i16* %b
  %tst7 = icmp sgt i16 %val7, %a
  br i1 %tst7, label %end, label %test8

test8:
  %val8 = load volatile i16, i16* %b
  %tst8 = icmp sge i16 %val8, %a
  br i1 %tst8, label %end, label %test9

test9:
  %val9 = load volatile i16, i16* %b
  %tst9 = icmp ugt i16 %val9, %a
  br i1 %tst9, label %end, label %test10

test10:
  %val10 = load volatile i16, i16* %b
  %tst10 = icmp uge i16 %val10, %a
  br i1 %tst10, label %end, label %test12

;; Check the case of a branch where the condition was generated in another
;; function
;
;test11:
;  %val11 = load volatile i16, i16* %b
;  br i1 %c, label %end, label %test12

test12:
  %val12 = load volatile i16, i16* %b
  br label %end

end:
  ret void
}
