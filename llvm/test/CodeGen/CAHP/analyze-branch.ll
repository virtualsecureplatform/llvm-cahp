; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=cahp -verify-machineinstrs < %s \
; RUN:   | FileCheck -check-prefix=CAHP %s

; This test checks that LLVM can do basic stripping and reapplying of branches
; to basic blocks.

declare void @test_true()
declare void @test_false()

; !0 corresponds to a branch being taken, !1 to not being takne.
!0 = !{!"branch_weights", i32 64, i32 4}
!1 = !{!"branch_weights", i32 4, i32 64}

define void @test_bcc_fallthrough_taken(i16 %in) nounwind {
; CAHP-LABEL: test_bcc_fallthrough_taken:
; CAHP:       # %bb.0:
; CAHP-NEXT:	addi2	sp, -2
; CAHP-NEXT:	swsp	ra, 0(sp)
; CAHP-NEXT:	li	a1, 42
; CAHP-NEXT:	bne	a0, a1, .LBB0_3
; CAHP-NEXT:# %bb.1:                                # %true
; CAHP-NEXT:	lui	a0, %hi(test_true)
; CAHP-NEXT:	addi	a0, a0, %lo(test_true)
; CAHP-NEXT:.LBB0_2:                                # %true
; CAHP-NEXT:	jalr	a0
; CAHP-NEXT:	lwsp	ra, 0(sp)
; CAHP-NEXT:	addi2	sp, 2
; CAHP-NEXT:	jr	ra
; CAHP-NEXT:.LBB0_3:                                # %false
; CAHP-NEXT:	lui	a0, %hi(test_false)
; CAHP-NEXT:	addi	a0, a0, %lo(test_false)
; CAHP-NEXT:	js	.LBB0_2
  %tst = icmp eq i16 %in, 42
  br i1 %tst, label %true, label %false, !prof !0

; Expected layout order is: Entry, TrueBlock, FalseBlock
; Entry->TrueBlock is the common path, which should be taken whenever the
; conditional branch is false.

true:
  call void @test_true()
  ret void

false:
  call void @test_false()
  ret void
}

define void @test_bcc_fallthrough_nottaken(i16 %in) nounwind {
; CAHP-LABEL: test_bcc_fallthrough_nottaken:
; CAHP:       # %bb.0:
; CAHP-NEXT:	addi2	sp, -2
; CAHP-NEXT:	swsp	ra, 0(sp)
; CAHP-NEXT:	li	a1, 42
; CAHP-NEXT:	beq	a0, a1, .LBB1_3
; CAHP-NEXT:# %bb.1:                                # %false
; CAHP-NEXT:	lui	a0, %hi(test_false)
; CAHP-NEXT:	addi	a0, a0, %lo(test_false)
; CAHP-NEXT:.LBB1_2:                                # %true
; CAHP-NEXT:	jalr	a0
; CAHP-NEXT:	lwsp	ra, 0(sp)
; CAHP-NEXT:	addi2	sp, 2
; CAHP-NEXT:	jr	ra
; CAHP-NEXT:.LBB1_3:                                # %true
; CAHP-NEXT:	lui	a0, %hi(test_true)
; CAHP-NEXT:	addi	a0, a0, %lo(test_true)
; CAHP-NEXT:	js	.LBB1_2
%tst = icmp eq i16 %in, 42
br i1 %tst, label %true, label %false, !prof !1

; Expected layout order is: Entry, FalseBlock, TrueBlock
; Entry->FalseBlock is the common path, which should be taken whenever the
; conditional branch is false

true:
  call void @test_true()
  ret void

false:
  call void @test_false()
  ret void
}

; TODO: how can we expand the coverage of the branch analysis functions?
