; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=cahp -verify-machineinstrs < %s \
; RUN:   | FileCheck %s -check-prefix=CAHP

define i16 @udiv(i16 %a, i16 %b) nounwind {
; CAHP-LABEL: udiv:
; CAHP:       # %bb.0:
; CAHP-NEXT:	addi2	sp, -2
; CAHP-NEXT:	swsp	ra, 0(sp)
; CAHP-NEXT:	jsal	__udivhi3
; CAHP-NEXT:	lwsp	ra, 0(sp)
; CAHP-NEXT:	addi2	sp, 2
; CAHP-NEXT:	jr	ra
  %1 = udiv i16 %a, %b
  ret i16 %1
}

define i16 @udiv_constant(i16 %a) nounwind {
; CAHP-LABEL: udiv_constant:
; CAHP:       # %bb.0:
; CAHP-NEXT:	addi2	sp, -2
; CAHP-NEXT:	swsp	ra, 0(sp)
; CAHP-NEXT:	lsi	a1, 5
; CAHP-NEXT:	jsal	__udivhi3
; CAHP-NEXT:	lwsp	ra, 0(sp)
; CAHP-NEXT:	addi2	sp, 2
; CAHP-NEXT:	jr	ra
  %1 = udiv i16 %a, 5
  ret i16 %1
}

define i16 @udiv_pow2(i16 %a) nounwind {
; CAHP-LABEL: udiv_pow2:
; CAHP:       # %bb.0:
; CAHP-NEXT:	lsri2	a0, 3
; CAHP-NEXT:	jr	ra
  %1 = udiv i16 %a, 8
  ret i16 %1
}

define i32 @udiv32(i32 %a, i32 %b) nounwind {
; CAHP-LABEL: udiv32:
; CAHP:       # %bb.0:
; CAHP-NEXT:	addi2	sp, -2
; CAHP-NEXT:	swsp	ra, 0(sp)
; CAHP-NEXT:	jsal	__udivsi3
; CAHP-NEXT:	lwsp	ra, 0(sp)
; CAHP-NEXT:	addi2	sp, 2
; CAHP-NEXT:	jr	ra
  %1 = udiv i32 %a, %b
  ret i32 %1
}

define i32 @udiv32_constant(i32 %a) nounwind {
; CAHP-LABEL: udiv32_constant:
; CAHP:       # %bb.0:
; CAHP-NEXT:	addi2	sp, -2
; CAHP-NEXT:	swsp	ra, 0(sp)
; CAHP-NEXT:	lsi	a2, 5
; CAHP-NEXT:	lsi	a3, 0
; CAHP-NEXT:	jsal	__udivsi3
; CAHP-NEXT:	lwsp	ra, 0(sp)
; CAHP-NEXT:	addi2	sp, 2
; CAHP-NEXT:	jr	ra
  %1 = udiv i32 %a, 5
  ret i32 %1
}

define i16 @sdiv(i16 %a, i16 %b) nounwind {
; CAHP-LABEL: sdiv:
; CAHP:       # %bb.0:
; CAHP-NEXT:	addi2	sp, -2
; CAHP-NEXT:	swsp	ra, 0(sp)
; CAHP-NEXT:	jsal	__divhi3
; CAHP-NEXT:	lwsp	ra, 0(sp)
; CAHP-NEXT:	addi2	sp, 2
; CAHP-NEXT:	jr	ra
  %1 = sdiv i16 %a, %b
  ret i16 %1
}

define i16 @sdiv_constant(i16 %a) nounwind {
; CAHP-LABEL: sdiv_constant:
; CAHP:       # %bb.0:
; CAHP-NEXT:	addi2	sp, -2
; CAHP-NEXT:	swsp	ra, 0(sp)
; CAHP-NEXT:	lsi	a1, 5
; CAHP-NEXT:	jsal	__divhi3
; CAHP-NEXT:	lwsp	ra, 0(sp)
; CAHP-NEXT:	addi2	sp, 2
; CAHP-NEXT:	jr	ra
  %1 = sdiv i16 %a, 5
  ret i16 %1
}

define i16 @sdiv_pow2(i16 %a) nounwind {
; CAHP-LABEL: sdiv_pow2:
; CAHP:       # %bb.0:
; CAHP-NEXT:	asri	a1, a0, 15
; CAHP-NEXT:	lsri2	a1, 13
; CAHP-NEXT:	add2	a0, a1
; CAHP-NEXT:	asri2	a0, 3
; CAHP-NEXT:	jr	ra
  %1 = sdiv i16 %a, 8
  ret i16 %1
}

define i32 @sdiv32(i32 %a, i32 %b) nounwind {
; CAHP-LABEL: sdiv32:
; CAHP:       # %bb.0:
; CAHP-NEXT:	addi2	sp, -2
; CAHP-NEXT:	swsp	ra, 0(sp)
; CAHP-NEXT:	jsal	__divsi3
; CAHP-NEXT:	lwsp	ra, 0(sp)
; CAHP-NEXT:	addi2	sp, 2
; CAHP-NEXT:	jr	ra
  %1 = sdiv i32 %a, %b
  ret i32 %1
}

define i32 @sdiv32_constant(i32 %a) nounwind {
; CAHP-LABEL: sdiv32_constant:
; CAHP:       # %bb.0:
; CAHP-NEXT:	addi2	sp, -2
; CAHP-NEXT:	swsp	ra, 0(sp)
; CAHP-NEXT:	lsi	a2, 5
; CAHP-NEXT:	lsi	a3, 0
; CAHP-NEXT:	jsal	__divsi3
; CAHP-NEXT:	lwsp	ra, 0(sp)
; CAHP-NEXT:	addi2	sp, 2
; CAHP-NEXT:	jr	ra
  %1 = sdiv i32 %a, 5
  ret i32 %1
}
