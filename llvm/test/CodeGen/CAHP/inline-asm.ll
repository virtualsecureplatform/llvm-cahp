; NOTE: Assertions have been autogenerated by utils/update_llc_test_checks.py
; RUN: llc -mtriple=cahp -verify-machineinstrs < %s \
; RUN:   | FileCheck -check-prefix=CAHP %s

@gi = external global i16

define i16 @constraint_r(i16 %a) {
; CAHP-LABEL: constraint_r:
; CAHP:       # %bb.0:
; CAHP-NEXT:	lui	a1, %hi(gi)
; CAHP-NEXT:	addi	a1, a1, %lo(gi)
; CAHP-NEXT:	lw	a1, 0(a1)
; CAHP-NEXT:	#APP
; CAHP-NEXT:	add a0, a0, a1
; CAHP-NEXT:	#NO_APP
; CAHP-NEXT:	jr	ra
  %1 = load i16, i16* @gi
  %2 = tail call i16 asm "add $0, $1, $2", "=r,r,r"(i16 %a, i16 %1)
  ret i16 %2
}

define i16 @constraint_i(i16 %a) {
; CAHP-LABEL: constraint_i:
; CAHP:       # %bb.0:
; CAHP-NEXT:	#APP
; CAHP-NEXT:	addi a0, a0, 113
; CAHP-NEXT:	#NO_APP
; CAHP-NEXT:	jr	ra
  %1 = load i16, i16* @gi
  %2 = tail call i16 asm "addi $0, $1, $2", "=r,r,i"(i16 %a, i16 113)
  ret i16 %2
}

define void @constraint_m(i16* %a) {
; CAHP-LABEL: constraint_m:
; CAHP:       # %bb.0:
; CAHP-NEXT:	#APP
; CAHP-NEXT:	#NO_APP
; CAHP-NEXT:	jr	ra
  call void asm sideeffect "", "=*m"(i16* %a)
  ret void
}

define i16 @constraint_m2(i16* %a) {
; CAHP-LABEL: constraint_m2:
; CAHP:       # %bb.0:
; CAHP-NEXT:	#APP
; CAHP-NEXT:	lw a0, 0(a0)
; CAHP-NEXT:	#NO_APP
; CAHP-NEXT:	jr	ra
  %1 = tail call i16 asm "lw $0, $1", "=r,*m"(i16* %a) nounwind
  ret i16 %1
}
